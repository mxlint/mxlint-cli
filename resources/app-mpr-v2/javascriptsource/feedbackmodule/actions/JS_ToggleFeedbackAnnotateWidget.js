// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// messageActionTypes are to identify the postMessage types between the JS Action & Feedback Widget.
const messageAction_toggleAnnotateMode = "mxFeedbackWidget_toggleAnnotateMode"; // The Feedback widget reads this to trigger a specific screenshot mode stage.
const messageAction_isBase64 = "mxFeedbackWidget_convertedToBase64"; // We expect this string from the widget when screenshot mode in enabled.
const messageAction_actionCancelled = "mxFeedbackWidget_actionCancelled" // The Feedback widget will send this back if screenshot/annotation actions are cancelled by the user.

const parseJSON = (event) => {
	try {
		return JSON.parse(event);
	} catch {
		return undefined;
	}
};
// END EXTRA CODE

/**
 * What does this JavaScript action do?
 * 
 * When you upload a screenshot manually the image can be annotatated. 
 * 
 * More detailed explanation:
 * The Mendix Feedback Widget handles annotation and also renders a default styled button on your page. 
 * 
 * In order to trigger the annotation mode you have to use this JavaScript action to send the widget the correct image payload.
 * 
 * Return Type:
 * Will return base 64 image string
 * @param {string} fileBlobURL
 * @returns {Promise.<string>}
 */
export async function JS_ToggleFeedbackAnnotateWidget(fileBlobURL) {
	// BEGIN USER CODE
	/* 
	The widget and JS action communicate with the following postMessage object structure:
	messageObject = {messageActionType: string;messageData: string;}
	*/
	const messageObject = {
		"messageActionType": messageAction_toggleAnnotateMode, // The widget reads this to trigger the Annotate Mode.
		"messageData": fileBlobURL // The widget uses this URL reference to get access to the locally stored image blob.
	};

	postMessage(JSON.stringify(messageObject), window.origin); // Send the serialized message object to Feedback Wiget to trigger annotate mode.
	
	return new Promise(resolve => {
		function handleEvent(event) {
			const parsedData = parseJSON(event.data); // Convert the received string to an object.

			if(event.origin === window.origin) {
				if (parsedData && parsedData.messageActionType === messageAction_isBase64) {
					window.removeEventListener("message", handleEvent);
					resolve(parsedData.messageData); // Resolve & return the base64 image to the nanoflow.
				};
				if(parsedData && parsedData.messageActionType === messageAction_actionCancelled) {
					resolve();
				}
			}

		};
		
        window.addEventListener("message", handleEvent); // Listen and wait for the Feedback Widget to send the base64 image.

    });
	// END USER CODE
}
