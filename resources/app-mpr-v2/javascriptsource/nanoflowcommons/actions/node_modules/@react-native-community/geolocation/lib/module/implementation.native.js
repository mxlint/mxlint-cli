import _regeneratorRuntime from"@babel/runtime/regenerator";import{RNCGeolocation,GeolocationEventEmitter}from'./nativeInterface';import invariant from'invariant';import{logError,warning}from'./utils';var subscriptions=[];var updatesEnabled=false;var Geolocation={setRNConfiguration:function setRNConfiguration(config){if(RNCGeolocation.setConfiguration){RNCGeolocation.setConfiguration(config);}},requestAuthorization:function requestAuthorization(){RNCGeolocation.requestAuthorization();},getCurrentPosition:function getCurrentPosition(geo_success,geo_error,geo_options){return _regeneratorRuntime.async(function getCurrentPosition$(_context){while(1){switch(_context.prev=_context.next){case 0:invariant(typeof geo_success==='function','Must provide a valid geo_success callback.');RNCGeolocation.getCurrentPosition(geo_options||{},geo_success,geo_error||logError);case 2:case"end":return _context.stop();}}});},watchPosition:function watchPosition(success,error,options){if(!updatesEnabled){RNCGeolocation.startObserving(options||{});updatesEnabled=true;}var watchID=subscriptions.length;subscriptions.push([GeolocationEventEmitter.addListener('geolocationDidChange',success),error?GeolocationEventEmitter.addListener('geolocationError',error):null]);return watchID;},clearWatch:function clearWatch(watchID){var sub=subscriptions[watchID];if(!sub){return;}sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();subscriptions[watchID]=undefined;var noWatchers=true;for(var ii=0;ii<subscriptions.length;ii++){if(subscriptions[ii]){noWatchers=false;}}if(noWatchers){Geolocation.stopObserving();}},stopObserving:function stopObserving(){if(updatesEnabled){RNCGeolocation.stopObserving();updatesEnabled=false;for(var ii=0;ii<subscriptions.length;ii++){var sub=subscriptions[ii];if(sub){warning(false,'Called stopObserving with existing subscriptions.');sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();}}subscriptions=[];}}};module.exports=Geolocation;
//# sourceMappingURL=implementation.native.js.map