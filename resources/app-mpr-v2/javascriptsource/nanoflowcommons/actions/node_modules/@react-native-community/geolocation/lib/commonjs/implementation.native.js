var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _nativeInterface=require("./nativeInterface");var _invariant=_interopRequireDefault(require("invariant"));var _utils=require("./utils");var subscriptions=[];var updatesEnabled=false;var Geolocation={setRNConfiguration:function setRNConfiguration(config){if(_nativeInterface.RNCGeolocation.setConfiguration){_nativeInterface.RNCGeolocation.setConfiguration(config);}},requestAuthorization:function requestAuthorization(){_nativeInterface.RNCGeolocation.requestAuthorization();},getCurrentPosition:function getCurrentPosition(geo_success,geo_error,geo_options){return _regenerator.default.async(function getCurrentPosition$(_context){while(1){switch(_context.prev=_context.next){case 0:(0,_invariant.default)(typeof geo_success==='function','Must provide a valid geo_success callback.');_nativeInterface.RNCGeolocation.getCurrentPosition(geo_options||{},geo_success,geo_error||_utils.logError);case 2:case"end":return _context.stop();}}});},watchPosition:function watchPosition(success,error,options){if(!updatesEnabled){_nativeInterface.RNCGeolocation.startObserving(options||{});updatesEnabled=true;}var watchID=subscriptions.length;subscriptions.push([_nativeInterface.GeolocationEventEmitter.addListener('geolocationDidChange',success),error?_nativeInterface.GeolocationEventEmitter.addListener('geolocationError',error):null]);return watchID;},clearWatch:function clearWatch(watchID){var sub=subscriptions[watchID];if(!sub){return;}sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();subscriptions[watchID]=undefined;var noWatchers=true;for(var ii=0;ii<subscriptions.length;ii++){if(subscriptions[ii]){noWatchers=false;}}if(noWatchers){Geolocation.stopObserving();}},stopObserving:function stopObserving(){if(updatesEnabled){_nativeInterface.RNCGeolocation.stopObserving();updatesEnabled=false;for(var ii=0;ii<subscriptions.length;ii++){var sub=subscriptions[ii];if(sub){(0,_utils.warning)(false,'Called stopObserving with existing subscriptions.');sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();}}subscriptions=[];}}};module.exports=Geolocation;
//# sourceMappingURL=implementation.native.js.map