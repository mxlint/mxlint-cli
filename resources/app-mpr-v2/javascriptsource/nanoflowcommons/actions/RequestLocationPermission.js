import Geolocation from '@react-native-community/geolocation';

// This file was generated by Mendix Studio Pro.
// BEGIN EXTRA CODE
// END EXTRA CODE
/**
 * On the native platform a request for permission should be made before the `GetCurrentLocation` action would work.
 * @returns {Promise.<boolean>}
 */
async function RequestLocationPermission() {
    // BEGIN USER CODE
    var _a;
    let reactNativeModule;
    let geolocationModule;
    const hasPermissionIOS = async () => {
        const openSetting = () => {
            reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Linking.openSettings().catch(() => {
                reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Alert.alert("Unable to open settings.");
            });
        };
        return geolocationModule
            .requestAuthorization("whenInUse")
            .then((status) => {
            if (status === "granted") {
                return true;
            }
            if (status === "denied") {
                reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Alert.alert("Location permission denied.");
            }
            if (status === "disabled") {
                reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Alert.alert("Location Services must be enabled to determine your location.", "", [
                    { text: "Go to Settings", onPress: openSetting },
                    {
                        text: "Don't Use Location"
                    }
                ]);
            }
            return false;
        });
    };
    const hasPermissionAndroid = async () => {
        var _a, _b;
        if (typeof ((_a = reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Platform) === null || _a === void 0 ? void 0 : _a.Version) === "number" && ((_b = reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Platform) === null || _b === void 0 ? void 0 : _b.Version) < 23) {
            return true;
        }
        const androidLocationPermission = reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION;
        if (!androidLocationPermission) {
            return false;
        }
        return reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.check(androidLocationPermission).then(hasPermission => {
            var _a;
            return hasPermission
                ? true
                : (_a = reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid) === null || _a === void 0 ? void 0 : _a.request(androidLocationPermission).then(status => {
                    if (status === (reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.RESULTS.GRANTED)) {
                        return true;
                    }
                    if (status === (reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.RESULTS.DENIED)) {
                        reactNativeModule.ToastAndroid.show("Location permission denied by user.", reactNativeModule.ToastAndroid.LONG);
                    }
                    else if (status === (reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN)) {
                        reactNativeModule.ToastAndroid.show("Location permission revoked by user.", reactNativeModule.ToastAndroid.LONG);
                    }
                    return false;
                });
        });
    };
    const hasLocationPermission = async () => {
        if ((reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Platform.OS) === "ios") {
            const hasPermission = await hasPermissionIOS();
            return hasPermission;
        }
        if ((reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Platform.OS) === "android") {
            const hasPermission = await hasPermissionAndroid();
            return hasPermission !== null && hasPermission !== void 0 ? hasPermission : false;
        }
        return Promise.reject(new Error("Unsupported platform"));
    };
    const hasLocationPermissionForOldLibrary = async () => {
        if ((reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.Platform.OS) === "android") {
            const locationPermission = reactNativeModule.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION;
            return reactNativeModule.PermissionsAndroid.check(locationPermission).then(hasPermission => hasPermission
                ? true
                : reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.request(locationPermission).then(status => status === (reactNativeModule === null || reactNativeModule === void 0 ? void 0 : reactNativeModule.PermissionsAndroid.RESULTS.GRANTED)));
        }
        else if (geolocationModule && geolocationModule.requestAuthorization) {
            try {
                geolocationModule.requestAuthorization();
                return Promise.resolve(true);
            }
            catch (error) {
                return Promise.reject(error);
            }
        }
        return false;
    };
    if (navigator && navigator.product === "ReactNative") {
        reactNativeModule = require("react-native");
        if (!reactNativeModule) {
            return Promise.reject(new Error("React Native module could not be found"));
        }
        if (reactNativeModule.NativeModules.RNFusedLocation) {
            geolocationModule = (await import('react-native-geolocation-service')).default;
            return hasLocationPermission();
        }
        else if (reactNativeModule.NativeModules.RNCGeolocation) {
            geolocationModule = Geolocation;
            return (_a = (await hasLocationPermissionForOldLibrary())) !== null && _a !== void 0 ? _a : false;
        }
        else {
            return Promise.reject(new Error("Geolocation module could not be found"));
        }
    }
    else if (navigator && navigator.geolocation) {
        return Promise.reject(new Error("No permission request for location is required for web/hybrid platform"));
    }
    else {
        return Promise.reject(new Error("Geolocation module could not be found"));
    }
    // END USER CODE
}

export { RequestLocationPermission };
