import { Big } from "big.js";

// This file was generated by Mendix Studio Pro.
// BEGIN EXTRA CODE
function deg2rad(deg) {
    return deg.times(Math.PI / 180);
}
function kmToStatueMile(km) {
    return km.div(1.609344);
}
function kmToNauticalMile(km) {
    return km.div(1.852);
}
// END EXTRA CODE
/**
 * latitudePoint1, longitudePoint1, latitudePoint2, longitudePoint2
 * @param {Big} latitudePoint1
 * @param {Big} longitudePoint1
 * @param {Big} latitudePoint2
 * @param {Big} longitudePoint2
 * @param {"KILOMETER"|"STATUTE_MILE"|"NAUTICAL_MILE"} [unit="KILOMETER"] - unit of measure
 * @returns {Promise.<Big>}
 */
async function GetStraightLineDistance(latitudePoint1, longitudePoint1, latitudePoint2, longitudePoint2, unit = "KILOMETER") {
    // BEGIN USER CODE
    const R = 6371; // Radius of the earth in km
    const dLat = deg2rad(latitudePoint2.minus(latitudePoint1)).toNumber();
    const dLon = deg2rad(longitudePoint2.minus(longitudePoint1)).toNumber();
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(latitudePoint1).toNumber()) *
            Math.cos(deg2rad(latitudePoint2).toNumber()) *
            Math.sin(dLon / 2) *
            Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = new Big(R * c); // Distance in km
    switch (unit) {
        case "KILOMETER": {
            return d;
        }
        case "STATUTE_MILE": {
            return kmToStatueMile(d);
        }
        case "NAUTICAL_MILE": {
            return kmToNauticalMile(d);
        }
        default:
            throw new Error(`Unknown unit: ${unit}`);
    }
    // END USER CODE
}

export { GetStraightLineDistance };
