{"version":3,"sources":["implementation.native.js"],"names":["RNCGeolocation","GeolocationEventEmitter","invariant","logError","warning","subscriptions","updatesEnabled","Geolocation","setRNConfiguration","config","setConfiguration","requestAuthorization","getCurrentPosition","geo_success","geo_error","geo_options","watchPosition","success","error","options","startObserving","watchID","length","push","addListener","clearWatch","sub","remove","sub1","undefined","noWatchers","ii","stopObserving","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport {RNCGeolocation, GeolocationEventEmitter} from './nativeInterface';\n\nimport invariant from 'invariant';\nimport {logError, warning} from './utils';\n\nlet subscriptions = [];\nlet updatesEnabled = false;\n\ntype GeoConfiguration = {\n  skipPermissionRequests: boolean,\n  authorizationLevel: 'always' | 'whenInUse' | 'auto',\n};\n\ntype GeoOptions = {\n  timeout?: number,\n  maximumAge?: number,\n  enableHighAccuracy?: boolean,\n  distanceFilter?: number,\n  useSignificantChanges?: boolean,\n};\n\n/**\n * The Geolocation API extends the web spec:\n * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html\n */\nconst Geolocation = {\n  /*\n   * Sets configuration options that will be used in all location requests.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#setrnconfiguration\n   *\n   */\n  setRNConfiguration: function(config: GeoConfiguration) {\n    if (RNCGeolocation.setConfiguration) {\n      RNCGeolocation.setConfiguration(config);\n    }\n  },\n\n  /*\n   * Requests Location permissions based on the key configured on pList.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#requestauthorization\n   */\n  requestAuthorization: function() {\n    RNCGeolocation.requestAuthorization();\n  },\n\n  /*\n   * Invokes the success callback once with the latest location info.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#getcurrentposition\n   */\n  getCurrentPosition: async function(\n    geo_success: Function,\n    geo_error?: Function,\n    geo_options?: GeoOptions,\n  ) {\n    invariant(\n      typeof geo_success === 'function',\n      'Must provide a valid geo_success callback.',\n    );\n\n    // Permission checks/requests are done on the native side\n    RNCGeolocation.getCurrentPosition(\n      geo_options || {},\n      geo_success,\n      geo_error || logError,\n    );\n  },\n\n  /*\n   * Invokes the success callback whenever the location changes.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#watchposition\n   */\n  watchPosition: function(\n    success: Function,\n    error?: Function,\n    options?: GeoOptions,\n  ): number {\n    if (!updatesEnabled) {\n      RNCGeolocation.startObserving(options || {});\n      updatesEnabled = true;\n    }\n    const watchID = subscriptions.length;\n    subscriptions.push([\n      GeolocationEventEmitter.addListener('geolocationDidChange', success),\n      error\n        ? GeolocationEventEmitter.addListener('geolocationError', error)\n        : null,\n    ]);\n    return watchID;\n  },\n\n  /*\n   * Unsubscribes the watcher with the given watchID.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#clearwatch\n   */\n  clearWatch: function(watchID: number) {\n    const sub = subscriptions[watchID];\n    if (!sub) {\n      // Silently exit when the watchID is invalid or already cleared\n      // This is consistent with timers\n      return;\n    }\n\n    sub[0].remove();\n    // array element refinements not yet enabled in Flow\n    const sub1 = sub[1];\n    sub1 && sub1.remove();\n    subscriptions[watchID] = undefined;\n    let noWatchers = true;\n    for (let ii = 0; ii < subscriptions.length; ii++) {\n      if (subscriptions[ii]) {\n        noWatchers = false; // still valid subscriptions\n      }\n    }\n    if (noWatchers) {\n      Geolocation.stopObserving();\n    }\n  },\n\n  /*\n   * Stops observing for device location changes and removes all registered listeners.\n   *\n   * See https://facebook.github.io/react-native/docs/geolocation.html#stopobserving\n   */\n  stopObserving: function() {\n    if (updatesEnabled) {\n      RNCGeolocation.stopObserving();\n      updatesEnabled = false;\n      for (let ii = 0; ii < subscriptions.length; ii++) {\n        const sub = subscriptions[ii];\n        if (sub) {\n          warning(false, 'Called stopObserving with existing subscriptions.');\n          sub[0].remove();\n          // array element refinements not yet enabled in Flow\n          const sub1 = sub[1];\n          sub1 && sub1.remove();\n        }\n      }\n      subscriptions = [];\n    }\n  },\n};\n\nmodule.exports = Geolocation;\n"]}