{"version":3,"sources":["utils.js"],"names":["logError","args","length","Error","err","console","error","message","stack","apply","warning","__DEV__","condition","format","undefined","argIndex","replace","x","module","exports"],"mappings":"AAUA,aAOA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAyC,+BAA7BC,IAA6B,0CAA7BA,IAA6B,wBACxD,GAAIA,IAAI,CAACC,MAAL,GAAgB,CAAhB,EAAqBD,IAAI,CAAC,CAAD,CAAJ,UAAmBE,CAAAA,KAA5C,CAAmD,CACjD,GAAMC,CAAAA,GAAG,CAAGH,IAAI,CAAC,CAAD,CAAhB,CACAI,OAAO,CAACC,KAAR,CAAc,WAAaF,GAAG,CAACG,OAAjB,CAA2B,cAA3B,CAA4CH,GAAG,CAACI,KAA9D,EACD,CAHD,IAGO,CACLH,OAAO,CAACC,KAAR,CAAcG,KAAd,CAAoBJ,OAApB,CAA6BJ,IAA7B,EACD,CACF,CAPD,CAeA,GAAMS,CAAAA,OAAO,CAAGC,OAAO,CACnB,SAASC,SAAT,CAA6BC,MAA7B,CAA6D,gCAAbZ,IAAa,2DAAbA,IAAa,4BAC3D,GAAIY,MAAM,GAAKC,SAAf,CAA0B,CACxB,KAAM,IAAIX,CAAAA,KAAJ,CACJ,4DACE,kBAFE,CAAN,CAID,CACD,GAAI,CAACS,SAAL,CAAgB,CACd,GAAIG,CAAAA,QAAQ,CAAG,CAAf,CACA,GAAIR,CAAAA,OAAO,CACT,YAAcM,MAAM,CAACG,OAAP,CAAe,KAAf,CAAsB,iBAAMf,CAAAA,IAAI,CAACc,QAAQ,EAAT,CAAV,EAAtB,CADhB,CAEA,GAAI,MAAOV,CAAAA,OAAP,GAAmB,WAAvB,CAAoC,CAClCA,OAAO,CAACC,KAAR,CAAcC,OAAd,EACD,CACD,GAAI,CAIF,KAAM,IAAIJ,CAAAA,KAAJ,CAAUI,OAAV,CAAN,CACD,CAAC,MAAOU,CAAP,CAAU,CAAE,CACf,CACF,CAtBkB,CAuBnB,UAAyB,CAAE,CAvB/B,CAyBAC,MAAM,CAACC,OAAP,CAAiB,CACfnB,QAAQ,CAARA,QADe,CAEfU,OAAO,CAAPA,OAFe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Small utility that can be used as an error handler. You cannot just pass\n * `console.error` as a failure callback - it's not properly bound.  If passes an\n * `Error` object, it will print the message and stack.\n */\nconst logError = function(...args: $ReadOnlyArray<mixed>) {\n  if (args.length === 1 && args[0] instanceof Error) {\n    const err = args[0];\n    console.error('Error: \"' + err.message + '\".  Stack:\\n' + err.stack);\n  } else {\n    console.error.apply(console, args);\n  }\n};\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nconst warning = __DEV__\n  ? function(condition: boolean, format: string, ...args: any[]) {\n      if (format === undefined) {\n        throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n            'message argument',\n        );\n      }\n      if (!condition) {\n        var argIndex = 0;\n        var message =\n          'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n        if (typeof console !== 'undefined') {\n          console.error(message);\n        }\n        try {\n          // --- Welcome to debugging React ---\n          // This error was thrown as a convenience so that you can use this stack\n          // to find the callsite that caused this warning to fire.\n          throw new Error(message);\n        } catch (x) {}\n      }\n    }\n  : function(...args: any[]) {};\n\nmodule.exports = {\n  logError,\n  warning,\n};\n"]}